package by.vsu.dao;

import by.vsu.config.TestConfig;
import by.vsu.model.Restaurant;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static org.junit.Assert.*;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = TestConfig.class)
public class RestaurantDaoTest implements ApplicationContextAware {
    private final static int RESTAURANT_SIZE = 5;

    private RestaurantDao restaurantDao;

    private ApplicationContext context;

    @Autowired
    public void setRestaurantDao(RestaurantDao restaurantDao) {
        this.restaurantDao = restaurantDao;
    }

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.context = applicationContext;
    }

    @Test
    public void findAllSizeTest() {
        List<Restaurant> restaurants = restaurantDao.findAll(RESTAURANT_SIZE, 0);
        assertEquals(RESTAURANT_SIZE, restaurants.size());
    }

    @Test
    public void findAllFieldsNotNullTest() {
        List<Restaurant> restaurants = restaurantDao.findAll(RESTAURANT_SIZE, 0);
        assertTrue(restaurants.stream().allMatch(this::mainFieldsNotNull));
        assertNotNull(restaurants.get(0).getAvatar());
    }

    @Test
    public void findByNameTest() {
        String name = "ka";
        List<Restaurant> restaurants = restaurantDao.findByName(name, RESTAURANT_SIZE, 0);
        assertEquals(2, restaurants.size());
    }

    @Test
    public void findByNameEmptyNameTest() {
        String name = "";
        List<Restaurant> restaurants = restaurantDao.findByName(name, RESTAURANT_SIZE, 0);
        assertEquals(RESTAURANT_SIZE, restaurants.size());
    }

    @Test
    public void findByAddressTest() {
        String address = "Terrace";
        List<Restaurant> restaurants = restaurantDao.findByAddress(address, RESTAURANT_SIZE, 0);
        assertEquals(2, restaurants.size());
    }

    @Test
    public void findByIdEqualsIdTest() {
        Integer id = 1;
        Restaurant restaurant = restaurantDao.findById(id);

        assertEquals(id, restaurant.getId());
    }


    @Test
    public void findByIdFieldsNotNullTest() {
        Integer id = 1;
        Restaurant restaurant = restaurantDao.findById(id);

        assertTrue(mainFieldsNotNull(restaurant));
        assertNotNull(restaurant.getAvatar());
    }

    @Test
    @Transactional
    public void createChangeSizeTest() {
        assertEquals(RESTAURANT_SIZE, restaurantDao.findAll(RESTAURANT_SIZE, 0).size());
        Restaurant restaurant = getRestaurant();
        restaurant.setId(null);
        restaurantDao.create(restaurant);
        int expectedSize = RESTAURANT_SIZE + 1;
        assertEquals(expectedSize, restaurantDao.findAll(expectedSize, 0).size());
    }

    @Test
    @Transactional
    public void createAutogeneratedIdTest() {
        Restaurant restaurant = getRestaurant();
        restaurant.setId(null);
        restaurantDao.create(restaurant);
        assertNotNull(restaurant.getId());
    }

    @Test
    @Transactional
    public void updateTest() {
        Integer id = 1;
        Restaurant restaurant = restaurantDao.findById(id);
        Restaurant newRestaurant = getRestaurant();
        newRestaurant.setId(id);

        restaurant.setAddress(newRestaurant.getAddress());
        restaurant.setName(newRestaurant.getName());
        restaurant.setAvatar(newRestaurant.getAvatar());
        restaurant.setUser(newRestaurant.getUser());

        restaurantDao.update(restaurant);

        Restaurant actual = restaurantDao.findById(id);
        assertEquals(restaurant, actual);
    }

    @Test
    @Transactional
    public void deleteChangeSizeTest() {
        assertEquals(RESTAURANT_SIZE, restaurantDao.findAll(RESTAURANT_SIZE, 0).size());
        restaurantDao.delete(6);
        int expectedSize = RESTAURANT_SIZE - 1;
        assertEquals(expectedSize, restaurantDao.findAll(expectedSize, 0).size());
    }

    private boolean mainFieldsNotNull(Restaurant restaurant) {
        return restaurant.getId() != null &&
                restaurant.getAddress() != null &&
                restaurant.getName() != null &&
                restaurant.getUser().getId() != null;
    }

    private Restaurant getRestaurant() {
        return context.getBean("restaurant", Restaurant.class);
    }
}