package by.vsu.dao;

import by.vsu.config.TestConfig;
import by.vsu.model.Comparison;
import by.vsu.model.Position;
import by.vsu.model.Scheme;
import by.vsu.model.Table;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static org.junit.Assert.*;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = TestConfig.class)
public class TableDaoTest implements ApplicationContextAware {
    private final static int TABLES_SIZE = 6;

    @Autowired
    private TableDao tableDao;

    private ApplicationContext context;

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.context = applicationContext;
    }

    @Test
    public void findAllTest() {
        List<Table> tables = tableDao.findAll(TABLES_SIZE, 0);

        assertEquals(TABLES_SIZE, tables.size());
        assertTrue(tables.stream().allMatch(this::mainFieldsCorrect));
    }

    @Test
    public void findAllByCapacityTest() {
        int capacity = 3;
        Comparison comparison = Comparison.GTE;
        List<Table> tablesByCapacity = tableDao.findAllByCapacity(capacity, comparison, TABLES_SIZE, 0);

        assertEquals(3, tablesByCapacity.size());
        assertTrue(tablesByCapacity.stream().allMatch(this::mainFieldsCorrect));
        assertTrue(tablesByCapacity.stream().allMatch(table -> table.getCapacity() >= capacity));
    }

    @Test
    public void findAllByWidthHeightTest() {
        int width = 40;
        int height = 30;
        Comparison compWidth = Comparison.LTE;
        Comparison compHeight = Comparison.LT;
        List<Table> tablesByWidthHeight = tableDao.findAllByWidthHeight(width, height, compWidth, compHeight, TABLES_SIZE, 0);

        assertEquals(6, tablesByWidthHeight.size());
        assertTrue(tablesByWidthHeight.stream().allMatch(this::mainFieldsCorrect));
        assertTrue(tablesByWidthHeight.stream()
                .allMatch(table -> table.getWidth() <= width && table.getHeight() < height));
    }

    @Test
    public void findAllByPositionTest() {
        Position position = new Position(0, 0);
        Comparison compX = Comparison.EQ;
        Comparison compY = Comparison.EQ;
        List<Table> tablesByPosition = tableDao.findAllByPosition(position, compX, compY, TABLES_SIZE, 0);

        assertEquals(2, tablesByPosition.size());
        assertTrue(tablesByPosition.stream().allMatch(this::mainFieldsCorrect));
        assertTrue(tablesByPosition.stream()
                .allMatch(table -> table.getPosition().equals(position)));
    }

    @Test
    public void findAllBySchemeIdTest() {
        Integer schemeId = 1;
        List<Table> tablesBySchemeId = tableDao.findAllBySchemeId(schemeId, TABLES_SIZE, 0);

        assertEquals(3, tablesBySchemeId.size());
        assertTrue(tablesBySchemeId.stream().allMatch(this::mainFieldsCorrect));
        assertTrue(tablesBySchemeId.stream()
                .allMatch(table -> table.getScheme().getId() == schemeId));
    }

    @Test
    public void findById() {
        Integer id = 1;
        Table table = tableDao.findById(id);

        assertEquals(id, table.getId());
        assertTrue(mainFieldsCorrect(table));
    }

    @Test
    @Transactional
    public void createChangeSizeTest() {
        assertEquals(TABLES_SIZE, tableDao.findAll(TABLES_SIZE, 0).size());
        Table table = getTable();
        table.setId(null);
        tableDao.create(table);

        int expectedSize = TABLES_SIZE + 1;
        assertEquals(expectedSize, tableDao.findAll(expectedSize, 0).size());
    }

    @Test
    @Transactional
    public void createAutogeneratedIdTest() {
        Table table = getTable();
        table.setId(null);
        tableDao.create(table);

        assertNotNull(table.getId());
    }

    @Test
    @Transactional
    public void updateTest() {
        Integer id = 1;
        Table newTable = getTable();
        Table table = tableDao.findById(id);
        table.setCapacity(newTable.getCapacity());
        table.setHeight(newTable.getHeight());
        table.setWidth(newTable.getWidth());
        table.setPosition(newTable.getPosition());
        table.setScheme(newTable.getScheme());

        tableDao.update(table);

        Table actual = tableDao.findById(id);
        newTable.setId(id);
        assertEquals(newTable, table);
    }

    @Test
    @Transactional
    public void deleteTest() {
        assertEquals(TABLES_SIZE, tableDao.findAll(TABLES_SIZE, 0).size());
        tableDao.delete(6);
        int expectedSize = TABLES_SIZE - 1;
        assertEquals(expectedSize, tableDao.findAll(TABLES_SIZE, 0).size());
    }

    private boolean mainFieldsCorrect(Table table) {
        return table.getPosition() != null &&
                table.getCapacity() > 0 &&
                table.getWidth() > 0 &&
                table.getHeight() > 0 &&
                table.getId() != null;
    }

    private Table getTable() {
        return context.getBean("table", Table.class);
    }
}