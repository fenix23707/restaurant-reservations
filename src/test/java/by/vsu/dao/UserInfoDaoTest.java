package by.vsu.dao;

import by.vsu.config.AppConfig;
import by.vsu.model.User;
import by.vsu.model.UserInfo;
import org.apache.commons.lang.time.DateUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.List;

import static org.junit.Assert.*;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = AppConfig.class)
public class UserInfoDaoTest {
    private static final int USER_INFO_SIZE = 10;

    private UserInfoDao userInfoDao;

    @Autowired
    public void setUserInfoDao(UserInfoDao userInfoDao) {
        this.userInfoDao = userInfoDao;
    }

    @Test
    public void findAllCorrectSizeTest() {
        List<UserInfo> userInfos = userInfoDao.findAll(USER_INFO_SIZE, 0);
        assertEquals(USER_INFO_SIZE, userInfos.size());
    }

    @Test
    public void findAllFieldsNotNullTest() {
        List<UserInfo> userInfos = userInfoDao.findAll(1, 0);
        UserInfo userInfo = userInfos.get(0);

        assertNotNull(userInfo.getId());
        assertNotNull(userInfo.getName());
        assertNotNull(userInfo.getAvatar());
        assertNotNull(userInfo.getPhone());
        assertNotNull(userInfo.getEmail());
        assertNotNull(userInfo.getBirthday());
        assertNotNull(userInfo.getUser().getId());
    }

    @Test
    public void findAllSkipTest() {
        int size = 2;
        List<UserInfo> userInfos = userInfoDao.findAll(USER_INFO_SIZE, USER_INFO_SIZE - size);

        assertEquals(size, userInfos.size());
    }

    @Test
    public void findAllLimitTest() {
        int size = 2;
        List<UserInfo> userInfos = userInfoDao.findAll(size,0);

        assertEquals(size, userInfos.size());
    }

    @Test
    public void findByIdResultNotNullTest() {
        Integer id = 1;
        assertNotNull(userInfoDao.findById(id));
    }

    @Test
    public void findByIdFieldsNotNullTest() {
        Integer id = 1;
        UserInfo userInfo = userInfoDao.findById(id);

        assertNotNull(userInfo.getId());
        assertNotNull(userInfo.getName());
        assertNotNull(userInfo.getAvatar());
        assertNotNull(userInfo.getBirthday());
        assertNotNull(userInfo.getEmail());
        assertNotNull(userInfo.getPhone());
        assertNotNull(userInfo.getUser());
        assertNotNull(userInfo.getUser().getId());
    }

    @Test
    public void findByIdSameIdTest() {
        Integer id = 1;
        UserInfo userInfo = userInfoDao.findById(id);

        assertEquals(id, userInfo.getId());
    }


    @Test
    @Transactional
    public void createChangeSizeTest() {
        UserInfo userInfo = getUserInfo();

        assertEquals("start value is incorrect",USER_INFO_SIZE, userInfoDao.findAll(USER_INFO_SIZE, 0).size());

        userInfoDao.create(userInfo);

        assertEquals(USER_INFO_SIZE + 1, userInfoDao.findAll(USER_INFO_SIZE + 1, 0).size());
    }

    @Test
    @Transactional
    public void createIdAutogeneratedTest() {
        UserInfo userInfo = getUserInfo();
        userInfo.setId(null);

        userInfoDao.create(userInfo);

        assertNotNull(userInfo.getId());
    }

    @Test
    @Transactional
    public void updateTest() {
        Integer id = 1;
        UserInfo userInfo = userInfoDao.findById(id);

        UserInfo expected = getUserInfo();
        userInfo.setUser(expected.getUser());
        userInfo.setAvatar(expected.getAvatar());
        userInfo.setBirthday(expected.getBirthday());
        userInfo.setName(expected.getName());
        userInfo.setEmail(expected.getEmail());
        userInfo.setPhone(expected.getPhone());

        userInfoDao.update(userInfo);

        UserInfo actual = userInfoDao.findById(id);

        assertEquals(expected.getName(), actual.getName());
        assertEquals(expected.getAvatar(), actual.getAvatar());
        assertEquals(expected.getEmail(), actual.getEmail());
        assertEquals(expected.getPhone(), actual.getPhone());
        assertEquals(expected.getUser(), actual.getUser());
        assertEquals(id, actual.getId());
        assertTrue(DateUtils.isSameDay(expected.getBirthday(), actual.getBirthday()));
    }

    private UserInfo getUserInfo() {
        String name = "name";
        String email = "email@afs.ru";
        Date date = new Date();
        String phine = "+375 29 123 21 21";
        String avatar = "ava.pnp";
        User user = new User();
        user.setId(3);
        return new UserInfo(name, date,phine, email, avatar,user);
    }
}